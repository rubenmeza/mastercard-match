/*
 * MATCH API
 *
 * Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.
 *
 * API version: 1.0.0
 * Contact: apisupport@mastercard.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package match

import (
	"encoding/json"
)

// TerminatedMerchant struct for TerminatedMerchant
type TerminatedMerchant struct {
	Merchant *Merchant `json:"Merchant,omitempty"`
	MerchantMatch *MerchantMatch `json:"MerchantMatch,omitempty"`
}

// NewTerminatedMerchant instantiates a new TerminatedMerchant object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTerminatedMerchant() *TerminatedMerchant {
	this := TerminatedMerchant{}
	return &this
}

// NewTerminatedMerchantWithDefaults instantiates a new TerminatedMerchant object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTerminatedMerchantWithDefaults() *TerminatedMerchant {
	this := TerminatedMerchant{}
	return &this
}

// GetMerchant returns the Merchant field value if set, zero value otherwise.
func (o *TerminatedMerchant) GetMerchant() Merchant {
	if o == nil || o.Merchant == nil {
		var ret Merchant
		return ret
	}
	return *o.Merchant
}

// GetMerchantOk returns a tuple with the Merchant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerminatedMerchant) GetMerchantOk() (*Merchant, bool) {
	if o == nil || o.Merchant == nil {
		return nil, false
	}
	return o.Merchant, true
}

// HasMerchant returns a boolean if a field has been set.
func (o *TerminatedMerchant) HasMerchant() bool {
	if o != nil && o.Merchant != nil {
		return true
	}

	return false
}

// SetMerchant gets a reference to the given Merchant and assigns it to the Merchant field.
func (o *TerminatedMerchant) SetMerchant(v Merchant) {
	o.Merchant = &v
}

// GetMerchantMatch returns the MerchantMatch field value if set, zero value otherwise.
func (o *TerminatedMerchant) GetMerchantMatch() MerchantMatch {
	if o == nil || o.MerchantMatch == nil {
		var ret MerchantMatch
		return ret
	}
	return *o.MerchantMatch
}

// GetMerchantMatchOk returns a tuple with the MerchantMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerminatedMerchant) GetMerchantMatchOk() (*MerchantMatch, bool) {
	if o == nil || o.MerchantMatch == nil {
		return nil, false
	}
	return o.MerchantMatch, true
}

// HasMerchantMatch returns a boolean if a field has been set.
func (o *TerminatedMerchant) HasMerchantMatch() bool {
	if o != nil && o.MerchantMatch != nil {
		return true
	}

	return false
}

// SetMerchantMatch gets a reference to the given MerchantMatch and assigns it to the MerchantMatch field.
func (o *TerminatedMerchant) SetMerchantMatch(v MerchantMatch) {
	o.MerchantMatch = &v
}

func (o TerminatedMerchant) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Merchant != nil {
		toSerialize["Merchant"] = o.Merchant
	}
	if o.MerchantMatch != nil {
		toSerialize["MerchantMatch"] = o.MerchantMatch
	}
	return json.Marshal(toSerialize)
}

type NullableTerminatedMerchant struct {
	value *TerminatedMerchant
	isSet bool
}

func (v NullableTerminatedMerchant) Get() *TerminatedMerchant {
	return v.value
}

func (v *NullableTerminatedMerchant) Set(val *TerminatedMerchant) {
	v.value = val
	v.isSet = true
}

func (v NullableTerminatedMerchant) IsSet() bool {
	return v.isSet
}

func (v *NullableTerminatedMerchant) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTerminatedMerchant(val *TerminatedMerchant) *NullableTerminatedMerchant {
	return &NullableTerminatedMerchant{value: val, isSet: true}
}

func (v NullableTerminatedMerchant) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTerminatedMerchant) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


