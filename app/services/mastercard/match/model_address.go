/*
 * MATCH API
 *
 * Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.
 *
 * API version: 1.0.0
 * Contact: apisupport@mastercard.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package match

import (
	"encoding/json"
)

// Address struct for Address
type Address struct {
	// Line 1 of the street address for the merchant location. Usually includes street number and name.
	Line1 string `json:"Line1"`
	// Line 2 of the street address,usually an apartment number or suite number.
	Line2 *string `json:"Line2,omitempty"`
	// The name of the city for a merchant location.
	City string `json:"City"`
	// The abbreviated state or province code for a merchant location (only supported for US and Canada merchants).
	CountrySubdivision *string `json:"CountrySubdivision,omitempty"`
	// The name of the province for the location.
	Province *string `json:"Province,omitempty"`
	// The postal code for a merchant location (only supported for US and Canada merchants).
	PostalCode string `json:"PostalCode"`
	// The three digit country code of the principal owner. Valid values are Three digit alpha country codes as defined in ISO 3166-1.
	Country string `json:"Country"`
}

// NewAddress instantiates a new Address object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddress(line1 string, city string, postalCode string, country string) *Address {
	this := Address{}
	this.Line1 = line1
	this.City = city
	this.PostalCode = postalCode
	this.Country = country
	return &this
}

// NewAddressWithDefaults instantiates a new Address object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddressWithDefaults() *Address {
	this := Address{}
	return &this
}

// GetLine1 returns the Line1 field value
func (o *Address) GetLine1() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Line1
}

// GetLine1Ok returns a tuple with the Line1 field value
// and a boolean to check if the value has been set.
func (o *Address) GetLine1Ok() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Line1, true
}

// SetLine1 sets field value
func (o *Address) SetLine1(v string) {
	o.Line1 = v
}

// GetLine2 returns the Line2 field value if set, zero value otherwise.
func (o *Address) GetLine2() string {
	if o == nil || o.Line2 == nil {
		var ret string
		return ret
	}
	return *o.Line2
}

// GetLine2Ok returns a tuple with the Line2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetLine2Ok() (*string, bool) {
	if o == nil || o.Line2 == nil {
		return nil, false
	}
	return o.Line2, true
}

// HasLine2 returns a boolean if a field has been set.
func (o *Address) HasLine2() bool {
	if o != nil && o.Line2 != nil {
		return true
	}

	return false
}

// SetLine2 gets a reference to the given string and assigns it to the Line2 field.
func (o *Address) SetLine2(v string) {
	o.Line2 = &v
}

// GetCity returns the City field value
func (o *Address) GetCity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.City
}

// GetCityOk returns a tuple with the City field value
// and a boolean to check if the value has been set.
func (o *Address) GetCityOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.City, true
}

// SetCity sets field value
func (o *Address) SetCity(v string) {
	o.City = v
}

// GetCountrySubdivision returns the CountrySubdivision field value if set, zero value otherwise.
func (o *Address) GetCountrySubdivision() string {
	if o == nil || o.CountrySubdivision == nil {
		var ret string
		return ret
	}
	return *o.CountrySubdivision
}

// GetCountrySubdivisionOk returns a tuple with the CountrySubdivision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetCountrySubdivisionOk() (*string, bool) {
	if o == nil || o.CountrySubdivision == nil {
		return nil, false
	}
	return o.CountrySubdivision, true
}

// HasCountrySubdivision returns a boolean if a field has been set.
func (o *Address) HasCountrySubdivision() bool {
	if o != nil && o.CountrySubdivision != nil {
		return true
	}

	return false
}

// SetCountrySubdivision gets a reference to the given string and assigns it to the CountrySubdivision field.
func (o *Address) SetCountrySubdivision(v string) {
	o.CountrySubdivision = &v
}

// GetProvince returns the Province field value if set, zero value otherwise.
func (o *Address) GetProvince() string {
	if o == nil || o.Province == nil {
		var ret string
		return ret
	}
	return *o.Province
}

// GetProvinceOk returns a tuple with the Province field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetProvinceOk() (*string, bool) {
	if o == nil || o.Province == nil {
		return nil, false
	}
	return o.Province, true
}

// HasProvince returns a boolean if a field has been set.
func (o *Address) HasProvince() bool {
	if o != nil && o.Province != nil {
		return true
	}

	return false
}

// SetProvince gets a reference to the given string and assigns it to the Province field.
func (o *Address) SetProvince(v string) {
	o.Province = &v
}

// GetPostalCode returns the PostalCode field value
func (o *Address) GetPostalCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PostalCode
}

// GetPostalCodeOk returns a tuple with the PostalCode field value
// and a boolean to check if the value has been set.
func (o *Address) GetPostalCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PostalCode, true
}

// SetPostalCode sets field value
func (o *Address) SetPostalCode(v string) {
	o.PostalCode = v
}

// GetCountry returns the Country field value
func (o *Address) GetCountry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *Address) GetCountryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *Address) SetCountry(v string) {
	o.Country = v
}

func (o Address) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["Line1"] = o.Line1
	}
	if o.Line2 != nil {
		toSerialize["Line2"] = o.Line2
	}
	if true {
		toSerialize["City"] = o.City
	}
	if o.CountrySubdivision != nil {
		toSerialize["CountrySubdivision"] = o.CountrySubdivision
	}
	if o.Province != nil {
		toSerialize["Province"] = o.Province
	}
	if true {
		toSerialize["PostalCode"] = o.PostalCode
	}
	if true {
		toSerialize["Country"] = o.Country
	}
	return json.Marshal(toSerialize)
}

type NullableAddress struct {
	value *Address
	isSet bool
}

func (v NullableAddress) Get() *Address {
	return v.value
}

func (v *NullableAddress) Set(val *Address) {
	v.value = val
	v.isSet = true
}

func (v NullableAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddress(val *Address) *NullableAddress {
	return &NullableAddress{value: val, isSet: true}
}

func (v NullableAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


