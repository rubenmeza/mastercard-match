/*
 * MATCH API
 *
 * Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.
 *
 * API version: 1.0.0
 * Contact: apisupport@mastercard.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package match

import (
	"encoding/json"
)

// DriversLicense struct for DriversLicense
type DriversLicense struct {
	// The drivers license number of a principal owner. Required when Drivers License Country is provided. Should not be provided if Drivers License Country is not provided.
	Number *string `json:"Number,omitempty"`
	// The abbreviated state or province code for a merchant location (only supported for US and Canada merchants).  Required when Drivers License Country is 'USA' . Should not be provided for non-US Drivers License Country.
	CountrySubdivision *string `json:"CountrySubdivision,omitempty"`
	// The three digit country code of the principal owner. Valid values are Three digit alpha country codes as defined in ISO 3166-1. Required when Drivers License Number is provided. Should not be provided if Drivers License Number is not provided.
	Country *string `json:"Country,omitempty"`
}

// NewDriversLicense instantiates a new DriversLicense object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDriversLicense() *DriversLicense {
	this := DriversLicense{}
	return &this
}

// NewDriversLicenseWithDefaults instantiates a new DriversLicense object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDriversLicenseWithDefaults() *DriversLicense {
	this := DriversLicense{}
	return &this
}

// GetNumber returns the Number field value if set, zero value otherwise.
func (o *DriversLicense) GetNumber() string {
	if o == nil || o.Number == nil {
		var ret string
		return ret
	}
	return *o.Number
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DriversLicense) GetNumberOk() (*string, bool) {
	if o == nil || o.Number == nil {
		return nil, false
	}
	return o.Number, true
}

// HasNumber returns a boolean if a field has been set.
func (o *DriversLicense) HasNumber() bool {
	if o != nil && o.Number != nil {
		return true
	}

	return false
}

// SetNumber gets a reference to the given string and assigns it to the Number field.
func (o *DriversLicense) SetNumber(v string) {
	o.Number = &v
}

// GetCountrySubdivision returns the CountrySubdivision field value if set, zero value otherwise.
func (o *DriversLicense) GetCountrySubdivision() string {
	if o == nil || o.CountrySubdivision == nil {
		var ret string
		return ret
	}
	return *o.CountrySubdivision
}

// GetCountrySubdivisionOk returns a tuple with the CountrySubdivision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DriversLicense) GetCountrySubdivisionOk() (*string, bool) {
	if o == nil || o.CountrySubdivision == nil {
		return nil, false
	}
	return o.CountrySubdivision, true
}

// HasCountrySubdivision returns a boolean if a field has been set.
func (o *DriversLicense) HasCountrySubdivision() bool {
	if o != nil && o.CountrySubdivision != nil {
		return true
	}

	return false
}

// SetCountrySubdivision gets a reference to the given string and assigns it to the CountrySubdivision field.
func (o *DriversLicense) SetCountrySubdivision(v string) {
	o.CountrySubdivision = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *DriversLicense) GetCountry() string {
	if o == nil || o.Country == nil {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DriversLicense) GetCountryOk() (*string, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *DriversLicense) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *DriversLicense) SetCountry(v string) {
	o.Country = &v
}

func (o DriversLicense) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Number != nil {
		toSerialize["Number"] = o.Number
	}
	if o.CountrySubdivision != nil {
		toSerialize["CountrySubdivision"] = o.CountrySubdivision
	}
	if o.Country != nil {
		toSerialize["Country"] = o.Country
	}
	return json.Marshal(toSerialize)
}

type NullableDriversLicense struct {
	value *DriversLicense
	isSet bool
}

func (v NullableDriversLicense) Get() *DriversLicense {
	return v.value
}

func (v *NullableDriversLicense) Set(val *DriversLicense) {
	v.value = val
	v.isSet = true
}

func (v NullableDriversLicense) IsSet() bool {
	return v.isSet
}

func (v *NullableDriversLicense) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDriversLicense(val *DriversLicense) *NullableDriversLicense {
	return &NullableDriversLicense{value: val, isSet: true}
}

func (v NullableDriversLicense) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDriversLicense) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


