/*
 * MATCH API
 *
 * Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.
 *
 * API version: 1.0.0
 * Contact: apisupport@mastercard.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package match

import (
	"encoding/json"
)

// Retro struct for Retro
type Retro struct {
	// The reference number of retroactive inquiry. Using this reference number, the details can be obtained.
	RefNum *string `json:"RefNum,omitempty"`
	// Date on which the retro inquiry was made. This will be in MM/DD/YYYY format.
	Date *string `json:"Date,omitempty"`
	// Name of Merchant or Business corresponds to retro inquiry.
	BusinessName *string `json:"BusinessName,omitempty"`
	// The name of the city for the merchant location corresponds to retro inquiry.
	City *string `json:"City,omitempty"`
	// The abbreviated state for a merchant location corresponds to retro inquiry.
	State *string `json:"State,omitempty"`
	// The three digit country code corresponds to retro inquiry. Valid values are Three digit alpha country codes as defined in ISO 3166-1.
	Country *string `json:"Country,omitempty"`
}

// NewRetro instantiates a new Retro object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRetro() *Retro {
	this := Retro{}
	return &this
}

// NewRetroWithDefaults instantiates a new Retro object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRetroWithDefaults() *Retro {
	this := Retro{}
	return &this
}

// GetRefNum returns the RefNum field value if set, zero value otherwise.
func (o *Retro) GetRefNum() string {
	if o == nil || o.RefNum == nil {
		var ret string
		return ret
	}
	return *o.RefNum
}

// GetRefNumOk returns a tuple with the RefNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Retro) GetRefNumOk() (*string, bool) {
	if o == nil || o.RefNum == nil {
		return nil, false
	}
	return o.RefNum, true
}

// HasRefNum returns a boolean if a field has been set.
func (o *Retro) HasRefNum() bool {
	if o != nil && o.RefNum != nil {
		return true
	}

	return false
}

// SetRefNum gets a reference to the given string and assigns it to the RefNum field.
func (o *Retro) SetRefNum(v string) {
	o.RefNum = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *Retro) GetDate() string {
	if o == nil || o.Date == nil {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Retro) GetDateOk() (*string, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *Retro) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *Retro) SetDate(v string) {
	o.Date = &v
}

// GetBusinessName returns the BusinessName field value if set, zero value otherwise.
func (o *Retro) GetBusinessName() string {
	if o == nil || o.BusinessName == nil {
		var ret string
		return ret
	}
	return *o.BusinessName
}

// GetBusinessNameOk returns a tuple with the BusinessName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Retro) GetBusinessNameOk() (*string, bool) {
	if o == nil || o.BusinessName == nil {
		return nil, false
	}
	return o.BusinessName, true
}

// HasBusinessName returns a boolean if a field has been set.
func (o *Retro) HasBusinessName() bool {
	if o != nil && o.BusinessName != nil {
		return true
	}

	return false
}

// SetBusinessName gets a reference to the given string and assigns it to the BusinessName field.
func (o *Retro) SetBusinessName(v string) {
	o.BusinessName = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *Retro) GetCity() string {
	if o == nil || o.City == nil {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Retro) GetCityOk() (*string, bool) {
	if o == nil || o.City == nil {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *Retro) HasCity() bool {
	if o != nil && o.City != nil {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *Retro) SetCity(v string) {
	o.City = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Retro) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Retro) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Retro) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *Retro) SetState(v string) {
	o.State = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *Retro) GetCountry() string {
	if o == nil || o.Country == nil {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Retro) GetCountryOk() (*string, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *Retro) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *Retro) SetCountry(v string) {
	o.Country = &v
}

func (o Retro) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RefNum != nil {
		toSerialize["RefNum"] = o.RefNum
	}
	if o.Date != nil {
		toSerialize["Date"] = o.Date
	}
	if o.BusinessName != nil {
		toSerialize["BusinessName"] = o.BusinessName
	}
	if o.City != nil {
		toSerialize["City"] = o.City
	}
	if o.State != nil {
		toSerialize["State"] = o.State
	}
	if o.Country != nil {
		toSerialize["Country"] = o.Country
	}
	return json.Marshal(toSerialize)
}

type NullableRetro struct {
	value *Retro
	isSet bool
}

func (v NullableRetro) Get() *Retro {
	return v.value
}

func (v *NullableRetro) Set(val *Retro) {
	v.value = val
	v.isSet = true
}

func (v NullableRetro) IsSet() bool {
	return v.isSet
}

func (v *NullableRetro) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRetro(val *Retro) *NullableRetro {
	return &NullableRetro{value: val, isSet: true}
}

func (v NullableRetro) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRetro) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


