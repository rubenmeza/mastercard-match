/*
 * MATCH API
 *
 * Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.
 *
 * API version: 1.0.0
 * Contact: apisupport@mastercard.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package match

import (
	"encoding/json"
)

// SearchCriteria struct for SearchCriteria
type SearchCriteria struct {
	// Determines if the inquiry is worldwide or not.  The Inquiry request can be either worldwide or Regions and/or Countries based. It cannot be both.  If it is not worldwide search (SearchAll = N) and if both  Region and Country are not specified, then search will happen for USA
	SearchAll string `json:"SearchAll"`
	Region *[]string `json:"Region,omitempty"`
	Country *[]string `json:"Country,omitempty"`
	// Determines how many minimum matches present for a merchant or inquiry to appear in the results.
	MinPossibleMatchCount *string `json:"MinPossibleMatchCount,omitempty"`
}

// NewSearchCriteria instantiates a new SearchCriteria object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchCriteria(searchAll string) *SearchCriteria {
	this := SearchCriteria{}
	this.SearchAll = searchAll
	return &this
}

// NewSearchCriteriaWithDefaults instantiates a new SearchCriteria object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchCriteriaWithDefaults() *SearchCriteria {
	this := SearchCriteria{}
	return &this
}

// GetSearchAll returns the SearchAll field value
func (o *SearchCriteria) GetSearchAll() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SearchAll
}

// GetSearchAllOk returns a tuple with the SearchAll field value
// and a boolean to check if the value has been set.
func (o *SearchCriteria) GetSearchAllOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SearchAll, true
}

// SetSearchAll sets field value
func (o *SearchCriteria) SetSearchAll(v string) {
	o.SearchAll = v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *SearchCriteria) GetRegion() []string {
	if o == nil || o.Region == nil {
		var ret []string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCriteria) GetRegionOk() (*[]string, bool) {
	if o == nil || o.Region == nil {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *SearchCriteria) HasRegion() bool {
	if o != nil && o.Region != nil {
		return true
	}

	return false
}

// SetRegion gets a reference to the given []string and assigns it to the Region field.
func (o *SearchCriteria) SetRegion(v []string) {
	o.Region = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *SearchCriteria) GetCountry() []string {
	if o == nil || o.Country == nil {
		var ret []string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCriteria) GetCountryOk() (*[]string, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *SearchCriteria) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given []string and assigns it to the Country field.
func (o *SearchCriteria) SetCountry(v []string) {
	o.Country = &v
}

// GetMinPossibleMatchCount returns the MinPossibleMatchCount field value if set, zero value otherwise.
func (o *SearchCriteria) GetMinPossibleMatchCount() string {
	if o == nil || o.MinPossibleMatchCount == nil {
		var ret string
		return ret
	}
	return *o.MinPossibleMatchCount
}

// GetMinPossibleMatchCountOk returns a tuple with the MinPossibleMatchCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCriteria) GetMinPossibleMatchCountOk() (*string, bool) {
	if o == nil || o.MinPossibleMatchCount == nil {
		return nil, false
	}
	return o.MinPossibleMatchCount, true
}

// HasMinPossibleMatchCount returns a boolean if a field has been set.
func (o *SearchCriteria) HasMinPossibleMatchCount() bool {
	if o != nil && o.MinPossibleMatchCount != nil {
		return true
	}

	return false
}

// SetMinPossibleMatchCount gets a reference to the given string and assigns it to the MinPossibleMatchCount field.
func (o *SearchCriteria) SetMinPossibleMatchCount(v string) {
	o.MinPossibleMatchCount = &v
}

func (o SearchCriteria) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["SearchAll"] = o.SearchAll
	}
	if o.Region != nil {
		toSerialize["Region"] = o.Region
	}
	if o.Country != nil {
		toSerialize["Country"] = o.Country
	}
	if o.MinPossibleMatchCount != nil {
		toSerialize["MinPossibleMatchCount"] = o.MinPossibleMatchCount
	}
	return json.Marshal(toSerialize)
}

type NullableSearchCriteria struct {
	value *SearchCriteria
	isSet bool
}

func (v NullableSearchCriteria) Get() *SearchCriteria {
	return v.value
}

func (v *NullableSearchCriteria) Set(val *SearchCriteria) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchCriteria) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchCriteria) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchCriteria(val *SearchCriteria) *NullableSearchCriteria {
	return &NullableSearchCriteria{value: val, isSet: true}
}

func (v NullableSearchCriteria) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchCriteria) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


