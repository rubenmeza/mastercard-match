/*
 * MATCH API
 *
 * Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.
 *
 * API version: 1.0.0
 * Contact: apisupport@mastercard.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package match

import (
	"encoding/json"
)

// Error struct for Error
type Error struct {
	// This is the unique identifier that attempts to define the field in error when available.  If a specific field cant be identified System will be returned.
	Source *string `json:"Source,omitempty"`
	// This will identify the reason for the error.
	ReasonCode *string `json:"ReasonCode,omitempty"`
	// This is the text description of the error. This is optional and will only be displayed if more information is available than is stored in the data identifier and reason code.
	Description *string `json:"Description,omitempty"`
	// This is a true/false presentation to explain if the transaction was submitted again would it be successful or not.
	Recoverable *bool `json:"Recoverable,omitempty"`
	// Details description of the issue
	Details *string `json:"Details,omitempty"`
}

// NewError instantiates a new Error object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewError() *Error {
	this := Error{}
	return &this
}

// NewErrorWithDefaults instantiates a new Error object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorWithDefaults() *Error {
	this := Error{}
	return &this
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *Error) GetSource() string {
	if o == nil || o.Source == nil {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Error) GetSourceOk() (*string, bool) {
	if o == nil || o.Source == nil {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *Error) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *Error) SetSource(v string) {
	o.Source = &v
}

// GetReasonCode returns the ReasonCode field value if set, zero value otherwise.
func (o *Error) GetReasonCode() string {
	if o == nil || o.ReasonCode == nil {
		var ret string
		return ret
	}
	return *o.ReasonCode
}

// GetReasonCodeOk returns a tuple with the ReasonCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Error) GetReasonCodeOk() (*string, bool) {
	if o == nil || o.ReasonCode == nil {
		return nil, false
	}
	return o.ReasonCode, true
}

// HasReasonCode returns a boolean if a field has been set.
func (o *Error) HasReasonCode() bool {
	if o != nil && o.ReasonCode != nil {
		return true
	}

	return false
}

// SetReasonCode gets a reference to the given string and assigns it to the ReasonCode field.
func (o *Error) SetReasonCode(v string) {
	o.ReasonCode = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Error) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Error) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Error) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Error) SetDescription(v string) {
	o.Description = &v
}

// GetRecoverable returns the Recoverable field value if set, zero value otherwise.
func (o *Error) GetRecoverable() bool {
	if o == nil || o.Recoverable == nil {
		var ret bool
		return ret
	}
	return *o.Recoverable
}

// GetRecoverableOk returns a tuple with the Recoverable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Error) GetRecoverableOk() (*bool, bool) {
	if o == nil || o.Recoverable == nil {
		return nil, false
	}
	return o.Recoverable, true
}

// HasRecoverable returns a boolean if a field has been set.
func (o *Error) HasRecoverable() bool {
	if o != nil && o.Recoverable != nil {
		return true
	}

	return false
}

// SetRecoverable gets a reference to the given bool and assigns it to the Recoverable field.
func (o *Error) SetRecoverable(v bool) {
	o.Recoverable = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *Error) GetDetails() string {
	if o == nil || o.Details == nil {
		var ret string
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Error) GetDetailsOk() (*string, bool) {
	if o == nil || o.Details == nil {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *Error) HasDetails() bool {
	if o != nil && o.Details != nil {
		return true
	}

	return false
}

// SetDetails gets a reference to the given string and assigns it to the Details field.
func (o *Error) SetDetails(v string) {
	o.Details = &v
}

func (o Error) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Source != nil {
		toSerialize["Source"] = o.Source
	}
	if o.ReasonCode != nil {
		toSerialize["ReasonCode"] = o.ReasonCode
	}
	if o.Description != nil {
		toSerialize["Description"] = o.Description
	}
	if o.Recoverable != nil {
		toSerialize["Recoverable"] = o.Recoverable
	}
	if o.Details != nil {
		toSerialize["Details"] = o.Details
	}
	return json.Marshal(toSerialize)
}

type NullableError struct {
	value *Error
	isSet bool
}

func (v NullableError) Get() *Error {
	return v.value
}

func (v *NullableError) Set(val *Error) {
	v.value = val
	v.isSet = true
}

func (v NullableError) IsSet() bool {
	return v.isSet
}

func (v *NullableError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableError(val *Error) *NullableError {
	return &NullableError{value: val, isSet: true}
}

func (v NullableError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


