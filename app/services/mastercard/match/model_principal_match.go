/*
 * MATCH API
 *
 * Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.
 *
 * API version: 1.0.0
 * Contact: apisupport@mastercard.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package match

import (
	"encoding/json"
)

// PrincipalMatch struct for PrincipalMatch
type PrincipalMatch struct {
	// The name of the Business which has been terminated.
	Name *string `json:"Name,omitempty"`
	// Address of the merchant location.
	Address *string `json:"Address,omitempty"`
	// The Business or Merchant's phone number, including the area code. Within the USA, phone numbers have a length of 10, and for outside the US, it can be any length with a maximum of 12 digits. Within the U.S. phone numbers can not start with 0 or 1. If the number is outside the U.S. region; do not include the country code. The phone number must be digits only, with no format characters such as parenthesis or dashes.
	PhoneNumber *string `json:"PhoneNumber,omitempty"`
	// The Business or Merchant's alternate phone number, including the area code. Within the USA, phone numbers have a length of 10, and for out outside the US, a max length of 25. Within the U.S. phone numbers can not start with 0 or 1. If the number is outside the U.S. region; do not include the country code. The number must be digits only, with no format characters such as parenthesis or dashes.
	AltPhoneNumber *string `json:"AltPhoneNumber,omitempty"`
	// The Social Security number of a principal owner. If the principal owner is not from the U.S. Region, then use their national ID card number.
	NationalId *string `json:"NationalId,omitempty"`
	// The drivers license number of a principal owner. owner is not from the U.S. Region, then use their national ID card number.
	DriversLicense *string `json:"DriversLicense,omitempty"`
}

// NewPrincipalMatch instantiates a new PrincipalMatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrincipalMatch() *PrincipalMatch {
	this := PrincipalMatch{}
	return &this
}

// NewPrincipalMatchWithDefaults instantiates a new PrincipalMatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrincipalMatchWithDefaults() *PrincipalMatch {
	this := PrincipalMatch{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PrincipalMatch) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrincipalMatch) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PrincipalMatch) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PrincipalMatch) SetName(v string) {
	o.Name = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *PrincipalMatch) GetAddress() string {
	if o == nil || o.Address == nil {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrincipalMatch) GetAddressOk() (*string, bool) {
	if o == nil || o.Address == nil {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *PrincipalMatch) HasAddress() bool {
	if o != nil && o.Address != nil {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *PrincipalMatch) SetAddress(v string) {
	o.Address = &v
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise.
func (o *PrincipalMatch) GetPhoneNumber() string {
	if o == nil || o.PhoneNumber == nil {
		var ret string
		return ret
	}
	return *o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrincipalMatch) GetPhoneNumberOk() (*string, bool) {
	if o == nil || o.PhoneNumber == nil {
		return nil, false
	}
	return o.PhoneNumber, true
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *PrincipalMatch) HasPhoneNumber() bool {
	if o != nil && o.PhoneNumber != nil {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given string and assigns it to the PhoneNumber field.
func (o *PrincipalMatch) SetPhoneNumber(v string) {
	o.PhoneNumber = &v
}

// GetAltPhoneNumber returns the AltPhoneNumber field value if set, zero value otherwise.
func (o *PrincipalMatch) GetAltPhoneNumber() string {
	if o == nil || o.AltPhoneNumber == nil {
		var ret string
		return ret
	}
	return *o.AltPhoneNumber
}

// GetAltPhoneNumberOk returns a tuple with the AltPhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrincipalMatch) GetAltPhoneNumberOk() (*string, bool) {
	if o == nil || o.AltPhoneNumber == nil {
		return nil, false
	}
	return o.AltPhoneNumber, true
}

// HasAltPhoneNumber returns a boolean if a field has been set.
func (o *PrincipalMatch) HasAltPhoneNumber() bool {
	if o != nil && o.AltPhoneNumber != nil {
		return true
	}

	return false
}

// SetAltPhoneNumber gets a reference to the given string and assigns it to the AltPhoneNumber field.
func (o *PrincipalMatch) SetAltPhoneNumber(v string) {
	o.AltPhoneNumber = &v
}

// GetNationalId returns the NationalId field value if set, zero value otherwise.
func (o *PrincipalMatch) GetNationalId() string {
	if o == nil || o.NationalId == nil {
		var ret string
		return ret
	}
	return *o.NationalId
}

// GetNationalIdOk returns a tuple with the NationalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrincipalMatch) GetNationalIdOk() (*string, bool) {
	if o == nil || o.NationalId == nil {
		return nil, false
	}
	return o.NationalId, true
}

// HasNationalId returns a boolean if a field has been set.
func (o *PrincipalMatch) HasNationalId() bool {
	if o != nil && o.NationalId != nil {
		return true
	}

	return false
}

// SetNationalId gets a reference to the given string and assigns it to the NationalId field.
func (o *PrincipalMatch) SetNationalId(v string) {
	o.NationalId = &v
}

// GetDriversLicense returns the DriversLicense field value if set, zero value otherwise.
func (o *PrincipalMatch) GetDriversLicense() string {
	if o == nil || o.DriversLicense == nil {
		var ret string
		return ret
	}
	return *o.DriversLicense
}

// GetDriversLicenseOk returns a tuple with the DriversLicense field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrincipalMatch) GetDriversLicenseOk() (*string, bool) {
	if o == nil || o.DriversLicense == nil {
		return nil, false
	}
	return o.DriversLicense, true
}

// HasDriversLicense returns a boolean if a field has been set.
func (o *PrincipalMatch) HasDriversLicense() bool {
	if o != nil && o.DriversLicense != nil {
		return true
	}

	return false
}

// SetDriversLicense gets a reference to the given string and assigns it to the DriversLicense field.
func (o *PrincipalMatch) SetDriversLicense(v string) {
	o.DriversLicense = &v
}

func (o PrincipalMatch) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.Address != nil {
		toSerialize["Address"] = o.Address
	}
	if o.PhoneNumber != nil {
		toSerialize["PhoneNumber"] = o.PhoneNumber
	}
	if o.AltPhoneNumber != nil {
		toSerialize["AltPhoneNumber"] = o.AltPhoneNumber
	}
	if o.NationalId != nil {
		toSerialize["NationalId"] = o.NationalId
	}
	if o.DriversLicense != nil {
		toSerialize["DriversLicense"] = o.DriversLicense
	}
	return json.Marshal(toSerialize)
}

type NullablePrincipalMatch struct {
	value *PrincipalMatch
	isSet bool
}

func (v NullablePrincipalMatch) Get() *PrincipalMatch {
	return v.value
}

func (v *NullablePrincipalMatch) Set(val *PrincipalMatch) {
	v.value = val
	v.isSet = true
}

func (v NullablePrincipalMatch) IsSet() bool {
	return v.isSet
}

func (v *NullablePrincipalMatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrincipalMatch(val *PrincipalMatch) *NullablePrincipalMatch {
	return &NullablePrincipalMatch{value: val, isSet: true}
}

func (v NullablePrincipalMatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrincipalMatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


