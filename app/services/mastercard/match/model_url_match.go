/*
 * MATCH API
 *
 * Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.
 *
 * API version: 1.0.0
 * Contact: apisupport@mastercard.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package match

import (
	"encoding/json"
)

// UrlMatch struct for UrlMatch
type UrlMatch struct {
	// The name of the Business which has been terminated.
	Url *string `json:"url,omitempty"`
}

// NewUrlMatch instantiates a new UrlMatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUrlMatch() *UrlMatch {
	this := UrlMatch{}
	return &this
}

// NewUrlMatchWithDefaults instantiates a new UrlMatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUrlMatchWithDefaults() *UrlMatch {
	this := UrlMatch{}
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *UrlMatch) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UrlMatch) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *UrlMatch) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *UrlMatch) SetUrl(v string) {
	o.Url = &v
}

func (o UrlMatch) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	return json.Marshal(toSerialize)
}

type NullableUrlMatch struct {
	value *UrlMatch
	isSet bool
}

func (v NullableUrlMatch) Get() *UrlMatch {
	return v.value
}

func (v *NullableUrlMatch) Set(val *UrlMatch) {
	v.value = val
	v.isSet = true
}

func (v NullableUrlMatch) IsSet() bool {
	return v.isSet
}

func (v *NullableUrlMatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUrlMatch(val *UrlMatch) *NullableUrlMatch {
	return &NullableUrlMatch{value: val, isSet: true}
}

func (v NullableUrlMatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUrlMatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


